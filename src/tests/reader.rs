//! `Reader` unit tests.

use std::io::Cursor;

use Reader;

#[test]
fn segment_info() {
    let data = Cursor::new(vec![
        0x15, 0x49, 0xa9, 0x66, 0xe7, 0x73, 0xa4, 0x90, 0x46, 0xc6, 0x9d, 0x45, 0xa1, 0x85, 0xa9,
        0x29, 0x4d, 0x3d, 0x0a, 0x2f, 0x75, 0x00, 0x56, 0xbd, 0x2a, 0xd7, 0xb1, 0x83, 0x0f, 0x42,
        0x40, 0x44, 0x89, 0x84, 0x46, 0xfd, 0xc0, 0x00, 0x44, 0x61, 0x88, 0x04, 0x1b, 0xbb, 0x9a,
        0x52, 0x1e, 0xb0, 0x00, 0x4d, 0x80, 0xa5, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x73,
        0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2f,
        0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x79, 0x61, 0x6d, 0x6b, 0x61, 0x57,
        0x41, 0x90, 0x53, 0x6f, 0x72, 0x65, 0x6e, 0x73, 0x6f, 0x6e, 0x20, 0x53, 0x71, 0x75, 0x65,
        0x65, 0x7a, 0x65,
    ]);

    let mut r = Reader::from(data);
    let seg = r.read_segment_info().unwrap();

    let uid = vec![
        0x46, 0xc6, 0x9d, 0x45, 0xa1, 0x85, 0xa9, 0x29, 0x4d, 0x3d, 0x0a, 0x2f, 0x75, 0x00, 0x56,
        0xbd,
    ];

    assert_eq!(seg.uid, uid);
    assert_eq!(seg.timecode_scale, 1000000);
    assert_eq!(seg.duration, 32480.0);
    assert_eq!(&seg.muxing_app, "http://sourceforge.net/projects/yamka");
    assert_eq!(seg.writing_app.as_str(), "Sorenson Squeeze");
}
